{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 CALL gds.graph.create(\
    'EMPLOYEE\'92,\
    \{\
        EMPLOYEES: \{\
            label: 'EMPLOYEES',\
            properties: 'satisfaction_level'\
        \}\
    \},\
    '*'\
);\
\
\
\
\
CALL gds.beta.knn.stream('EMPLOYEE', \{\
    topK: 1,\
    nodeWeightProperty: 'satisfaction_level',\
    // The following parameters are set to produce a deterministic result\
    randomSeed: 42,\
    concurrency: 1,\
    sampleRate: 1.0,\
    deltaThreshold: 0.0\
\})\
YIELD node1, node2, similarity\
RETURN gds.util.asNode(node1).employees_id AS EMPLOYEE1, gds.util.asNode(node2).employees_id AS EMPLOYEE2, similarity ORDER BY similarity DESCENDING, EMPLOYEE1, EMPLOYEE2\
\
\
\
CALL gds.beta.knn.stream('EMPLOYEE', \{\
    topK: 1,\
    nodeWeightProperty: 'satisfaction_level',\
    // The following parameters are set to produce a deterministic result\
    randomSeed: 42,\
    concurrency: 1,\
    sampleRate: 1.0,\
    deltaThreshold: 0.0\
\})\
YIELD node1, node2, similarity WHERE similarity<1.0 \
RETURN gds.util.asNode(node1).employees_id AS EMPLOYEE1, gds.util.asNode(node2).employees_id AS EMPLOYEE2, similarity  ORDER BY similarity DESCENDING, EMPLOYEE1, EMPLOYEE2 \
\
\
\
CALL gds.graph.create(\
    'EMPLOYEE1',\
    \{\
        EMPLOYEES: \{\
            label: 'EMPLOYEES',\
            properties: 'satisfaction_level'\
        \}\
    \},\
    '*'\
);\
\
\
CALL gds.beta.knn.stream('EMPLOYEE1', \{\
    topK: 1,\
    nodeWeightProperty: 'satisfaction_level',\
    // The following parameters are set to produce a deterministic result\
    randomSeed: 42,\
    concurrency: 1,\
    sampleRate: 1.0,\
    deltaThreshold: 0.0\
\})\
YIELD node1, node2, similarity\
RETURN gds.util.asNode(node1).employees_id AS EMPLOYEE1, gds.util.asNode(node2).employees_id AS EMPLOYEE2, similarity ORDER BY similarity DESCENDING, EMPLOYEE1, EMPLOYEE2\
\
\
\
CALL gds.beta.knn.stream('EMPLOYEE1', \{\
    topK: 1,\
    nodeWeightProperty: 'satisfaction_level',\
    // The following parameters are set to produce a deterministic result\
    randomSeed: 42,\
    concurrency: 1,\
    sampleRate: 1.0,\
    deltaThreshold: 0.0\
\})\
YIELD node1, node2, similarity WHERE gds.util.asNode(node1).employees_id  = "EMPLOYEESDP1"\
RETURN gds.util.asNode(node1).employees_id AS EMPLOYEE1, gds.util.asNode(node2).employees_id AS EMPLOYEE2, similarity  ORDER BY similarity DESCENDING, EMPLOYEE1, EMPLOYEE2\
\
\
CALL gds.beta.knn.stream('EMPLOYEE1', \{\
    topK: 1,\
    nodeWeightProperty: 'satisfaction_level',\
    // The following parameters are set to produce a deterministic result\
    randomSeed: 42,\
    concurrency: 1,\
    sampleRate: 1.0,\
    deltaThreshold: 0.0\
\})\
YIELD node1, node2, similarity WHERE gds.util.asNode(node1).employees_id  = "EMPLOYEESDP2"\
RETURN gds.util.asNode(node1).employees_id AS EMPLOYEE1, gds.util.asNode(node2).employees_id AS EMPLOYEE2, similarity  ORDER BY similarity DESCENDING, EMPLOYEE1, EMPLOYEE2\
\
\
CALL gds.beta.knn.stream('EMPLOYEE1', \{\
    topK: 1,\
    nodeWeightProperty: 'satisfaction_level',\
    // The following parameters are set to produce a deterministic result\
    randomSeed: 42,\
    concurrency: 1,\
    sampleRate: 1.0,\
    deltaThreshold: 0.0\
\})\
YIELD node1, node2, similarity WHERE gds.util.asNode(node2).employees_id  = "EMPLOYEESDP2"\
RETURN gds.util.asNode(node1).employees_id AS EMPLOYEE1, gds.util.asNode(node2).employees_id AS EMPLOYEE2, similarity  ORDER BY similarity DESCENDING, EMPLOYEE1, EMPLOYEE2\
\
\
CALL gds.beta.knn.stream('EMPLOYEE1', \{\
    topK: 1,\
    nodeWeightProperty: 'satisfaction_level',\
    // The following parameters are set to produce a deterministic result\
    randomSeed: 42,\
    concurrency: 1,\
    sampleRate: 1.0,\
    deltaThreshold: 0.0\
\})\
YIELD node1, node2, similarity WHERE gds.util.asNode(node2).employees_id  = "EMPLOYEESDP1"\
RETURN gds.util.asNode(node1).employees_id AS EMPLOYEE1, gds.util.asNode(node2).employees_id AS EMPLOYEE2, similarity  ORDER BY similarity DESCENDING, EMPLOYEE1, EMPLOYEE2\
\
MATCH(N:EMPLOYEES) WHERE N.employees_id = 'EMPLOYEESDP1' or N.employees_id = 'EMPLOYEESDP2'  RETURN N\
\
\
\
CALL gds.graph.create(\
    'EMPLOYEE3',\
    \{\
        EMPLOYEES70: \{\
            label: 'EMPLOYEES70',\
            properties: 'satisfaction_level'\
        \},\
        EMPLOYEES30: \{\
            label: 'EMPLOYEES30',\
            properties: 'satisfaction_level'\
        \}\
    \},\
    '*'\
);\
\
\
CALL gds.beta.knn.stream('EMPLOYEE3', \{\
    topK: 1,\
    nodeWeightProperty: 'satisfaction_level',\
    // The following parameters are set to produce a deterministic result\
    randomSeed: 42,\
    concurrency: 1,\
    sampleRate: 1.0,\
    deltaThreshold: 0.0\
\})\
YIELD node1, node2, similarity\
RETURN gds.util.asNode(node1).employees_id AS EMPLOYEE1, gds.util.asNode(node2).employees_id AS EMPLOYEE2, similarity ORDER BY similarity DESCENDING, EMPLOYEE1, EMPLOYEE2\
\
\
CALL gds.beta.knn.stream('EMPLOYEE3', \{\
    topK: 1,\
    nodeWeightProperty: 'satisfaction_level',\
    // The following parameters are set to produce a deterministic result\
    randomSeed: 42,\
    concurrency: 1,\
    sampleRate: 1.0,\
    deltaThreshold: 0.0\
\})\
YIELD node1, node2, similarity WHERE similarity<1\
RETURN gds.util.asNode(node1).employees_id AS EMPLOYEE1, gds.util.asNode(node2).employees_id AS EMPLOYEE2, similarity ORDER BY similarity DESCENDING, EMPLOYEE1, EMPLOYEE2\
\
\
}